name: Lightsail Server Deploy

on:
  push:
    branches:
      - feature/infra-and-cd
      - main
    paths:
      - '.github/workflows/workflow.yaml'
      - 'package.json'
      - 'entrypoint.sh'
      - 'package-lock.json'
      - 'nest-cli.json'
      - 'tsconfig*.json'
      - 'src'

jobs:
  deploy-ready:
    name: deployment-ready
    runs-on: ubuntu-latest
    outputs:
      nginx: ${{ steps.filter.outputs.nginx }}
      app: ${{ steps.filter.outputs.app }}
      services: ${{ steps.slack-message-creator.services }}
      branch: ${{ steps.extract_branch.outputs.branch }}
      stage: ${{ steps.stage.outputs.stage }}
    steps:
      - uses: actions/checkout@v3
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Extract stage
        id: stage
        shell: bash
        run: |
          if [ "${{steps.extract_branch.outputs.branch}}" == "feature/infra-and-cd" ]; then echo "::set-output name=stage::dev"; else echo "::set-output name=stage::production"; fi
      - name: filter services
        uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{steps.extract_branch.outputs.branch}}
          filters: |
            app:
              - "package*.json"
              - "tsconfig*.json"
              - "src/**"
              - "Dockerfile"
              - "docker-compose.yaml"
              - "entrypoint.sh"
              - ".github/workflows/workflow.yaml"
            nginx:
              - "nginx/**"
              - ".github/workflows/workflow.yaml"

      - name: Prepare Slack Message
        id: slack-message-creator
        shell: bash
        run: |
          SLACK_MESSAGE=""

          SOURCE_FLAGS=("${{ steps.filter.outputs.nginx }}" "${{ steps.filter.outputs.app }}")
          SOURCES=("nginx" "app")
          UPDATED_SOURCES=""
          for i in "${!SOURCE_FLAGS[@]}"; do
            echo ${SOURCE_FLAGS[i]}
            if [[ "${SOURCE_FLAGS[i]}" == "true" ]]; then
              echo "true"
              SLACK_MESSAGE+=" - ${SOURCES[i]}\n"
              UPDATED_SOURCES+="${SOURCES[i]} "
            else
              echo "false"
            fi
          done
          echo "::set-output name=slack-message::${SLACK_MESSAGE}"
          echo "::set-output name=services::${UPDATED_SOURCES}"

      - name: Send GitHub Action trigger data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.21.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "attachments": [
                {
                  "mrkdwn_in": ["text"],
                  "color": "#9b9ba4",
                  "pretext": "Deployment to <${{github.SERVER_URL}}/${{github.REPOSITORY}}/actions/runs/${{github.RUN_ID}}|${{steps.stage.outputs.stage}}>",
                  "text": "서버 배포가 시작되었습니다",
                  "fields": [
                      {
                          "title": "배포 중인 서비스",
                          "value": "${{steps.slack-message-creator.outputs.slack-message}}",
                          "short": false
                      },
                      {
                          "title": "Actor",
                          "value": "<https://github.com/${{github.ACTOR}}|${{github.ACTOR}}>",
                          "short": true
                      },
                      {
                          "title": "Status",
                          "value": "Started",
                          "short": true
                      },
                  ],
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  prepare-dotenv:
    name: prepare dotenv file
    runs-on: ubuntu-latest
    needs: deploy-ready
    if: ${{ (needs.deploy-ready.outputs.app == 'true')|| (needs.deploy-ready.outputs.nginx == 'true') }}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Create dotenv .env for dev
        shell: bash
        working-directory: .
        if: needs.deploy-ready.outputs.branch == 'feature/infra-and-cd'
        env:
          MYSQL_DATABASE: ${{ secrets.DEV_MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.DEV_MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.DEV_MYSQL_PASSWORD }}
          DATABASE_SYNC: ${{ secrets.DEV_DATABASE_SYNC }}
          DATABASE_MIGRATION: ${{ secrets.DEV_DATABASE_MIGRATION }}
          API_PORT: ${{ secrets.DEV_API_PORT }}
          API_DOMAIN: ${{ secrets.DEV_API_DOMAIN }}
          NGINX_VERSION: ${{ secrets.DEV_NGINX_VERSION }}
          MYSQL_VERSION: ${{ secrets.DEV_MYSQL_VERSION }}
          REDIS_VERSION: ${{ secrets.DEV_REDIS_VERSION }}
          NODE_VERSION: ${{ secrets.DEV_NODE_VERSION }}
          ECR_REGISTRY: ${{ secrets.DEV_ECR_REGISTRY }}
          ECR_SERVER_REPOSITORY: ${{ secrets.DEV_ECR_SERVER_REPOSITORY }}
          ECR_SERVER_NGINX_REPOSITORY: ${{ secrets.DEV_ECR_SERVER_NGINX_REPOSITORY }}
          ENV: dev
        run: |
          echo "NGINX_VERSION=$NGINX_VERSION" >> .env
          echo "MYSQL_VERSION=$MYSQL_VERSION" >> .env
          echo "REDIS_VERSION=$REDIS_VERSION" >> .env
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> .env
          echo "ECR_SERVER_REPOSITORY=$ECR_SERVER_REPOSITORY" >> .env
          echo "ECR_SERVER_NGINX_REPOSITORY=$ECR_SERVER_NGINX_REPOSITORY" >> .env
          echo "NODE_ENV=$NODE_ENV" >> .env
          cat > ./terraform/vars/${{needs.deploy-ready.outputs.stage}}.tfvars <<EOL
          environment = "dev"
          container_deployments = [
            {
              name = "server"
              containers = [{
                name = "app"
                image = "$ECR_REGISTRY/$ECR_SERVER_REPOSITORY:$NODE_VERSION-$ENV-latest"
                command = []
                environment = {
                  MYSQL_DATABASE = "$MYSQL_DATABASE"
                  MYSQL_PASSWORD = "$MYSQL_PASSWORD"
                  MYSQL_USER = "$MYSQL_USER"
                  DATABASE_SYNC = "$DATABASE_SYNC"
                  DATABASE_MIGRATION = "$DATABASE_MIGRATION"
                  REDIS_HOST = "localhost"
                  API_PORT = $API_PORT
                }
                ports = {
                  "$API_PORT" = "HTTP"
                }
                endpoint_port = -1
                health_check = {
                  healthy_threshold = -1
                  unhealthy_threshold = -1
                  timeout_seconds = -1
                  interval_seconds = -1
                  path  = "/health"
                  success_codes = "200"
                }
                is_public = false
              },
              {
                name = "nginx"
                image = "$ECR_REGISTRY/$ECR_SERVER_NGINX_REPOSITORY:$NODE_VERSION-$ENV-latest"
                command = []
                environment = {
                  API_HOST = "localhost"
                  API_DOMAIN = "$API_DOMAIN"
                }
                ports = {
                  "80" = "HTTP"
                }
                endpoint_port = 80
                health_check = {
                  healthy_threshold = 2
                  unhealthy_threshold = 5
                  timeout_seconds = 10
                  interval_seconds = 15
                  path  = "/health"
                  success_codes = "200"
                }
                is_public = true
              },
              {
                name = "redis"
                image = "redis:$REDIS_VERSION"
                command = []
                environment = {}
                ports = {
                  "6379" = "TCP"
                }
                endpoint_port = -1
                health_check = {
                  healthy_threshold = -1
                  unhealthy_threshold = -1
                  timeout_seconds = -1
                  interval_seconds = -1
                  path  = "/health"
                  success_codes = "200"
                }
                is_public = false
              }]
            }
          ]
          EOL
      - name: Create dotenv .env for production
        shell: bash
        working-directory: .
        if: needs.deploy-ready.outputs.branch == 'main'
        env:
          MYSQL_DATABASE: ${{ secrets.PROD_MYSQL_DATABASE }}
          MYSQL_USER: ${{ secrets.PROD_MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.PROD_MYSQL_PASSWORD }}
          DATABASE_SYNC: ${{ secrets.PROD_DATABASE_SYNC }}
          DATABASE_MIGRATION: ${{ secrets.PROD_DATABASE_MIGRATION }}
          API_PORT: ${{ secrets.PROD_API_PORT }}
          API_DOMAIN: ${{ secrets.PROD_API_DOMAIN }}
          NGINX_VERSION: ${{ secrets.PROD_NGINX_VERSION }}
          MYSQL_VERSION: ${{ secrets.PROD_MYSQL_VERSION }}
          REDIS_VERSION: ${{ secrets.PROD_REDIS_VERSION }}
          NODE_VERSION: ${{ secrets.PROD_NODE_VERSION }}
          ECR_REGISTRY: ${{ secrets.PROD_ECR_REGISTRY }}
          ECR_SERVER_REPOSITORY: ${{ secrets.PROD_ECR_SERVER_REPOSITORY }}
          ECR_SERVER_NGINX_REPOSITORY: ${{ secrets.PROD_ECR_SERVER_NGINX_REPOSITORY }}
          ENV: prod
        run: |
          echo "NGINX_VERSION=$NGINX_VERSION" >> .env
          echo "MYSQL_VERSION=$MYSQL_VERSION" >> .env
          echo "REDIS_VERSION=$REDIS_VERSION" >> .env
          echo "ECR_REGISTRY=$ECR_REGISTRY" >> .env
          echo "ECR_SERVER_REPOSITORY=$ECR_SERVER_REPOSITORY" >> .env
          echo "ECR_SERVER_NGINX_REPOSITORY=$ECR_SERVER_NGINX_REPOSITORY" >> .env
          echo "NODE_ENV=$NODE_ENV" >> .env
          cat > ./terraform/vars/${{needs.deploy-ready.outputs.stage}}.tfvars <<EOL
          environment = "prod"
          container_deployments = [
            {
              name = "server"
              containers = [{
                name = "app"
                image = "$ECR_REGISTRY/$ECR_SERVER_REPOSITORY:$NODE_VERSION-$ENV-latest"
                command = []
                environment = {
                  MYSQL_DATABASE = "$MYSQL_DATABASE"
                  MYSQL_PASSWORD = "$MYSQL_PASSWORD"
                  MYSQL_USER = "$MYSQL_USER"
                  DATABASE_SYNC = "$DATABASE_SYNC"
                  DATABASE_MIGRATION = "$DATABASE_MIGRATION"
                  REDIS_HOST = "localhost"
                  API_PORT = $API_PORT
                }
                ports = {
                  "$API_PORT" = "HTTP"
                }
                endpoint_port = -1
                health_check = {
                  healthy_threshold = -1
                  unhealthy_threshold = -1
                  timeout_seconds = -1
                  interval_seconds = -1
                  path  = "/health"
                  success_codes = "200"
                }
                is_public = false
              },
              {
                name = "nginx"
                image = "$ECR_REGISTRY/$ECR_SERVER_NGINX_REPOSITORY:$NODE_VERSION-$ENV-latest"
                command = []
                environment = {
                  API_HOST = "localhost"
                  API_DOMAIN = "$API_DOMAIN"
                }
                ports = {
                  "80" = "HTTP"
                }
                endpoint_port = 80
                health_check = {
                  healthy_threshold = 2
                  unhealthy_threshold = 5
                  timeout_seconds = 10
                  interval_seconds = 15
                  path  = "/health"
                  success_codes = "200"
                }
                is_public = true
              },
              {
                name = "redis"
                image = "redis:$REDIS_VERSION"
                command = []
                environment = {}
                ports = {
                  "6379" = "TCP"
                }
                endpoint_port = -1
                health_check = {
                  healthy_threshold = -1
                  unhealthy_threshold = -1
                  timeout_seconds = -1
                  interval_seconds = -1
                  path  = "/health"
                  success_codes = "200"
                }
                is_public = false
              }]
            }
          ]
          EOL
      - name: cache dotenv
        id: dotenv-cache
        uses: actions/cache@v3
        env:
          cache-name: cache-dotenv-${{needs.deploy-ready.outputs.stage}}
        with:
          path: '.env'
          key: ${{ runner.os }}-${{ env.cache-name }}-${{needs.deploy-ready.outputs.stage}}-${{ github.SHA }}
      - name: cache tfvars
        id: tfvars-cache
        uses: actions/cache@v3
        env:
          cache-name: cache-tfvars-${{needs.deploy-ready.outputs.stage}}
        with:
          path: './terraform/vars/${{needs.deploy-ready.outputs.stage}}.tfvars'
          key: ${{ runner.os }}-${{ env.cache-name }}-${{needs.deploy-ready.outputs.stage}}-${{ github.SHA }}

  image-prepare:
    name: image preparation start
    runs-on: ubuntu-latest
    needs: [prepare-dotenv, deploy-ready]
    if: ${{ (needs.deploy-ready.outputs.app == 'true')|| (needs.deploy-ready.outputs.nginx == 'true') }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Get Time
        id: time
        uses: nanzm/get-time-action@v1.1
        with:
          timeZone: 9
          format: 'YYYY-MM-DD-HH-mm-ss'
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: cache dotenv
        id: dotenv-cache
        uses: actions/cache@v3
        env:
          cache-name: cache-dotenv-${{needs.deploy-ready.outputs.stage}}
        with:
          path: '.env'
          key: ${{ runner.os }}-${{ env.cache-name }}-${{needs.deploy-ready.outputs.stage}}-${{ github.SHA }}
      - name: Build the stack
        working-directory: .
        run: TAG=${{steps.time.outputs.time}} docker compose build
      - name: Push the stack
        working-directory: .
        run: TAG=${{steps.time.outputs.time}} docker compose push ${{needs.deploy-ready.outputs.services}}
      - name: Build the stack latest
        working-directory: .
        run: docker compose build
      - name: Push the stack latest
        working-directory: .
        run: docker compose push ${{needs.deploy-ready.outputs.services}}

  deploy-service:
    name: service deployment
    runs-on: ubuntu-latest
    needs: [image-prepare, deploy-ready]
    if: ${{ (needs.deploy-ready.outputs.app == 'true')|| (needs.deploy-ready.outputs.nginx == 'true') }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - name: Install AWS CLI 2
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          which aws
          sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update
      - name: Add profile credentials to ~/.aws/credentials
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }} --profile init-infra
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }} --profile init-infra
      - name: cache tfvars
        id: tfvars-cache
        uses: actions/cache@v3
        env:
          cache-name: cache-tfvars-${{needs.deploy-ready.outputs.stage}}
        with:
          path: './terraform/vars/${{needs.deploy-ready.outputs.stage}}.tfvars'
          key: ${{ runner.os }}-${{ env.cache-name }}-${{needs.deploy-ready.outputs.stage}}-${{ github.SHA }}
      - run: terraform init
        working-directory: ./terraform/lightsail/deploy
      - run: terraform workspace new ${{needs.deploy-ready.outputs.stage}} && terraform workspace select ${{needs.deploy-ready.outputs.stage}}
        working-directory: ./terraform/lightsail/deploy
      - name: Terraform Plan
        id: plan
        working-directory: ./terraform/lightsail/deploy
        run: terraform plan -no-color -var-file="../../vars/${{needs.deploy-ready.outputs.stage}}.tfvars"
        continue-on-error: true
      - name: Terraform Apply
        id: apply
        working-directory: ./terraform/lightsail/deploy
        run: terraform apply -auto-approve -var-file="../../vars/${{needs.deploy-ready.outputs.stage}}.tfvars"
        continue-on-error: true

  deploy-end:
    name: deploy end notification
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [deploy-service, deploy-ready]
    steps:
      - uses: actions/checkout@v3
      - name: status save - failure
        id: status_1
        if: ${{ failure() }}
        uses: slackapi/slack-github-action@v1.21.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "attachments": [
                {
                  "mrkdwn_in": ["text"],
                  "color": "#cc0000",
                  "text": "배포가 실패했습니다",
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
      - name: status save - success
        id: status_1
        if: ${{ !failure() }}
        uses: slackapi/slack-github-action@v1.21.0
        with:
          # For posting a rich message using Block Kit
          payload: |
            {
              "attachments": [
                {
                  "mrkdwn_in": ["text"],
                  "color": "#8fce00",
                  "text": "배포가 완료되었습니다",
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
